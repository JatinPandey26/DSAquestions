import java.io.*;
import java.util.*;

public class Main {

  public static void solution(char[][] arr, String[] words, int vidx) {
    //write your code here

    if (vidx == words.length ) {
      print(arr);
      return;
    }

    for (int i = 0 ; i < arr.length ; i++) {
      for (int j = 0 ; j < arr[0].length ; j++ ) {
        if (arr[i][j] == '-' || arr[i][j] == words[vidx].charAt(0)) {

          if (canPlaceHorizontally(arr, words[vidx], i, j ) ) {
            boolean [] visited = placeHorizontally(arr, words[vidx], i, j );
            solution(arr, words, vidx + 1);
            unplaceHorizontally(arr, words[vidx], visited, i, j );
          }
          if (canPlacevertically(arr, words[vidx], i, j ) ) {
            boolean [] visited = placevertically(arr, words[vidx], i, j );
            solution(arr, words, vidx + 1);
            unplacevertically(arr, words[vidx], visited, i, j );
          }
        }


      }
    }

  }

  public static boolean canPlaceHorizontally(char[][] arr, String word, int i, int j ) {

    if (j - 1 >= 0 && arr[i][j - 1] != '+' ) {
      return false;
    }
    else if (j + word.length() < arr[0].length && arr[i][j + word.length()] != '+' ) {
      return false;
    }

    for (int k = 0 ; k < word.length() ; k++ ) {
      if (j + k >= arr[0].length ) {
        return false;
      }

      if (arr[i][j + k] == '-' || arr[i][j + k] == word.charAt(k) ) {
        continue;
      }
      else {
        return false;
      }
    }

    return true;

  }

  public static boolean canPlacevertically(char[][] arr, String word, int i, int j ) {

    if (i - 1 >= 0 && arr[i - 1][j] != '+' ) {
      return false;
    }
    else if (i + word.length() < arr.length && arr[i + word.length()][j ] != '+' ) {
      return false;
    }

    for (int k = 0 ; k < word.length() ; k++ ) {
      if (i + k >= arr.length ) {
        return false;
      }

      if (arr[i + k][j] == '-' || arr[i + k][j] == word.charAt(k) ) {
        continue;
      }
      else {
        return false;
      }
    }

    return true;

  }

  public static boolean[]  placeHorizontally (char[][] arr, String word, int i, int j ) {
    boolean[] visited = new boolean[word.length()];
    for (int k = 0 ; k < word.length() ; k++) {

      if (arr[i][j + k] == '-') {
        arr[i][j + k] = word.charAt(k);
        visited[k] = true;
      }
    }
    return visited;
  }
  public static boolean[]  placevertically (char[][] arr, String word, int i, int j ) {
    boolean[] visited = new boolean[word.length()];
    for (int k = 0 ; k < word.length() ; k++) {

      if (arr[i + k][j] == '-') {
        arr[i + k][j] = word.charAt(k);
        visited[k] = true;
      }
    }
    return visited;
  }
  public static void  unplaceHorizontally (char[][] arr, String word, boolean[] visited, int i, int j ) {
    for (int k = 0 ; k < word.length() ; k++) {
      if (visited[k] == true ) {
        arr[i][j + k] = '-';
      }
    }
  }
  public static void  unplacevertically (char[][] arr, String word, boolean[] visited, int i, int j ) {
    for (int k = 0 ; k < word.length() ; k++) {
      if (visited[k] == true ) {
        arr[i + k][j] = '-';
      }
    }
  }

  public static void print(char[][] arr) {
    for (int i = 0 ; i < arr.length; i++) {
      for (int j = 0 ; j < arr.length; j++) {
        System.out.print(arr[i][j]);
      }
      System.out.println();
    }

  }
  public static void main(String[] args) {
    Scanner scn = new Scanner(System.in);
    char[][] arr = new char[10][10];
    for (int i = 0 ; i < arr.length; i++) {
      String str = scn.next();
      arr[i] = str.toCharArray();
    }
    int n = scn.nextInt();
    String[] words = new String[n];
    for (int i = 0 ; i  < words.length; i++) {
      words[i] = scn.next();
    }
    solution(arr,words,0);

  }
}
