  public static class pair{
    int js = -1;
    int jl = -1;
    pair(int js , int jl){
        this.js = js;
        this.jl = jl;
    }
  }

  public static int findRadius(int[]houses, int[]heaters) {
    Arrays.sort(heaters);
    int ans = 0;
    for (int i = 0 ; i < houses.length ; i++) {
      int house = houses[i];

      pair p = binarySearch(house, heaters);
    //   System.out.println(house + " -> " + p.js + " | " + p.jl);
      int disFromjs = p.js == -1 ? Integer.MAX_VALUE : house - p.js;
      int disFromjl = p.jl == -1 ? Integer.MAX_VALUE : p.jl - house;

      int minD = Math.min(disFromjs,disFromjl);
      ans = Math.max(minD,ans);
    }

    return ans;
  }
  
  public static pair binarySearch(int house , int[] heaters){
    
    int li = 0;
    int hi = heaters.length-1;
    int js = -1;
    int jl = -1;
    
    while(li <= hi)
    {
        int mid = (li+hi)/2;
        
        if(heaters[mid] == house){
            pair p = new pair(heaters[mid],heaters[mid]);
            return p;
        }
        else if(heaters[mid] < house){
            // System.out.println(js + " s-> " + heaters[mid]);
            js = heaters[mid];
            li = mid + 1;
        } 
        else {
            //  System.out.println(jl + " l-> " + heaters[mid]);
            jl = heaters[mid];
            hi = mid - 1;
        }
        
    }
    return new pair(js,jl);  
  }
