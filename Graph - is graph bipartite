import java.io.*;
import java.util.*;

public class Main {
  static class Edge {
    int src;
    int nbr;
    int wt;

    Edge(int src, int nbr, int wt) {
      this.src = src;
      this.nbr = nbr;
      this.wt = wt;
    }
  }
  public static class Pair {
    int v;
    int lvl;

    Pair(int v, int lvl) {
      this.v = v;
      this.lvl = lvl;
    }
  }

  public static boolean isBipartite(ArrayList<Edge>[] graph, int src , int[] visited ) {
    Queue<Pair> que = new ArrayDeque<>();
    que.add(new Pair(src, 0));
    
   
    while (que.size() > 0) {
      Pair top = que.remove();

      if (visited[top.v] != -1) {
        if (top.lvl != visited[top.v]) {
          return false;
        }
        else{
            return true;
        }
      }


      visited[top.v] = top.lvl;


      for (Edge edge : graph[top.v]){
          if(visited[edge.nbr] == -1 ){
              que.add(new Pair(edge.nbr,top.lvl + 1) );
          }
      }

      }
  return true;

  }

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

    int vtces = Integer.parseInt(br.readLine());
    ArrayList<Edge>[] graph = new ArrayList[vtces];
    for (int i = 0; i < vtces; i++) {
      graph[i] = new ArrayList<>();
    }

    int edges = Integer.parseInt(br.readLine());
    for (int i = 0; i < edges; i++) {
      String[] parts = br.readLine().split(" ");
      int v1 = Integer.parseInt(parts[0]);
      int v2 = Integer.parseInt(parts[1]);
      int wt = Integer.parseInt(parts[2]);
      graph[v1].add(new Edge(v1, v2, wt));
      graph[v2].add(new Edge(v2, v1, wt));
    }
   int[] visited = new int[graph.length];
    Arrays.fill(visited, -1);
    // write your code here
    for(int src = 0; src < vtces ; src++){
        if(visited[src] == -1){
            boolean check = isBipartite(graph,src,visited);
            if(check == false){
                System.out.println(false);
                return;
            }
        }
    }
   System.out.println(true);
  }
}
