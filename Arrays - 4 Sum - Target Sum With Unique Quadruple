 public static List<List<Integer>> fourSum(int[] arr, int target) {
       List<List<Integer>> res = new ArrayList<>();
    int n = arr.length;
    if (n < 4) return res;
    Arrays.sort(arr);

    for (int i = 0 ; i <= n - 4 ; i++) {
      if(i != 0 && arr[i] == arr[i - 1]) continue;

      int val1 = arr[i];
      int targ = target - val1;
      List<List<Integer>> smallres = threeSum(arr,targ,i+1,n-1);
      
      if(smallres.size() != 0){
        for(List<Integer> list : smallres){
            list.add(val1);
            res.add(list);
        }  
      }

    }
    
    return res;
  }
  
  public static List<List<Integer>> threeSum(int[] arr, int target, int start , int end) {

    List<List<Integer>> res = new ArrayList<>();
    int n = arr.length;
    if (n < 3) return res;
    Arrays.sort(arr);

    for (int i = start ; i <= n - 3 ; i++) {
      if(i != start && arr[i] == arr[i - 1]) continue;

      int val1 = arr[i];
      int targ = target - val1;
      List<List<Integer>> smallres = twoSum(arr,targ,i+1,n-1);
      
      if(smallres.size() != 0){
        for(List<Integer> list : smallres){
            list.add(val1);
            res.add(list);
        }  
      }

    }
    
    return res;

  }

  public static List<List<Integer>> twoSum(int[] arr, int target, int start, int end) {
    List<List<Integer>> ans = new ArrayList<>();

    int i = start;
    int j = end;

    while (i < j) {
      int sum = arr[i] + arr[j];

      if (sum == target) {
        List<Integer> smallAns = new ArrayList<>();
        smallAns.add(arr[i]);
        smallAns.add(arr[j]);
        ans.add(smallAns);
        i++;
        j--;

        while (i < j && arr[i] == arr[i - 1]) i++;
        while (i < j && arr[j] == arr[j + 1]) j--;
      }
      else if (sum < target) {
        i++;
        while (i < j && arr[i] == arr[i - 1]) i++;
      }
      else {
        j--;
        while (i < j && arr[j] == arr[j + 1]) j--;
      }
    }
    return ans;
  }
