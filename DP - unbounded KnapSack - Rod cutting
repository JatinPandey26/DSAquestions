class Solution{
     static int[][] dp ;
    public int cutRod(int price[], int n) {
        dp = new int[n+1][n+1];
        recSolDp(price, n , n);
        
        return dp[n][n];
        
      
    }
   
    
    public void recSolDp(int[] price , int n , int length ){
        
        // if(n==0 || length == 0 ){
        //   return 0; 
        // }
        
        // if(n <= length){
        //     return Math.max(price[n-1] + recSol(price,n,length - n) , recSol(price,n-1,length )  );
        // }
        // else{
        //     return recSol(price , n-1,length);
        // }
        
        
        for(int i = 0 ; i < dp.length ; i++){
            for(int j = 0 ; j < dp[0].length ; j++){
                if(i == 0 || j == 0){
                    dp[i][j] = 0;
                    continue;
                }
                
                if(i <= j){
                    dp[i][j] = Math.max(price[i-1] + dp[i][j-i] , dp[i-1][j]  );
                }
                else{
                    dp[i][j] = dp[i-1][j];
                }
                
            }
        }
        
        
        
        
        
        
        
        
    }
    
}
