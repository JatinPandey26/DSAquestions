    public static int merge(int [] nums , int low , int mid , int high){
        int j = mid + 1;
        int cnt = 0;
        for(int i = low ; i<= mid ; i++){
            while(j <= high && nums[i] > ((long)nums[j]*2)  ){
                j++;
            }
             cnt += j -( mid+1) ;
        }
        ArrayList<Integer> list = new ArrayList<>();
        
        int left = low;
        int right = mid + 1;
        while(left < mid + 1 && right <= high){
            if(nums[left] <= nums[right] ){
                list.add(nums[left++]);
            }
            else{
                list.add(nums[right++]);
            }
        }
        while(left < mid+1){
            list.add(nums[left++]);
        }
        while(right <=high){
            list.add(nums[right++]);
        }
        
        for(int i = low ; i <= high ; i++){
            nums[i] = list.get(i - low);
        }
        return cnt;
        
        
    }
    
    public static int mergeSort(int[] nums , int low , int high  ){
        if(low >= high ){
            return 0;
        }
        int inv = 0;
        int mid = low + (high - low)/2;
        inv += mergeSort(nums , low , mid);
        inv += mergeSort(nums , mid+1, high );
        
        inv += merge(nums,low, mid , high);
        
        return inv;
    }
    
    
    
    public int reversePairs(int[] nums) {
        return mergeSort(nums,0, nums.length-1);
    }
    
