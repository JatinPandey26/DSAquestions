import java.io.*;
import java.util.*;

public class Main {
     private static class Pair {
      String psf;
      int i;
      int j;

      public Pair(String psf, int i, int j) {
         this.psf = psf;
         this.i = i;
         this.j = j;
      }
   }
    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner sn = new Scanner(System.in);
        int n = sn.nextInt();
        int m = sn.nextInt();
        int[][] mine = new int[n][m];
        for(int i = 0 ; i < n ; i++ ){
            for(int j = 0 ; j < m  ; j++){
                mine[i][j] = sn.nextInt();
            }
        }
        
        int[][] dp = new int[n][m];
        
        for(int j = m  - 1 ; j >= 0 ; j--){
            for(int i = 0 ; i < n ; i++){
                if( j == dp[0].length - 1){
                    dp[i][j] = mine[i][j];
                }
                else if(i == 0 ){
               int max = Math.max(dp[i][j+1],dp[i+1][j+1] ); 
               dp[i][j] = mine[i][j] + max;
                }
                else if(i == dp.length - 1 ){
               int max = Math.max(dp[i][j+1],dp[i-1][j+1] ); 
               dp[i][j] = mine[i][j] + max;
                }
               else if(i > 0 && i < dp.length  - 1) {
               int max = Math.max(dp[i][j+1],dp[i+1][j+1] );
               int fmax = Math.max(max , dp[i-1][j+1]);
               dp[i][j] = mine[i][j] + fmax;
                }
             }
        }
        
        int ans = Integer.MIN_VALUE;
       
      
        for(int i = 0 , j = 0; i < n  ; i++ ){
            if(dp[i][j] > ans ){
                
                
                ans = dp[i][j];
            }
        }
        System.out.println(ans);
       
        
        ArrayDeque<Pair> que = new ArrayDeque<>();
        
        
        for(int i = 0 , j = 0; i < n  ; i++ ){
            if(dp[i][j] == ans ){
                
                que.add(new Pair(i + " ",i,0));
            }
        }
        
        while(que.size() > 0){
            Pair rem = que.removeFirst();
            
            if(rem.j == dp[0].length-1){
                System.out.println(rem.psf);
            }
            else if(rem.i == 0){
                
                if(dp[rem.i][rem.j+1] > dp[rem.i+1][rem.j+1]){
                    que.add(new Pair(rem.psf+"d2 " , rem.i , rem.j + 1));
                }
                else{
                    que.add(new Pair(rem.psf+"d3 " , rem.i + 1 , rem.j + 1));
                }
                
                
            }
              else if(rem.i == dp.length-1){
                
                if(dp[rem.i][rem.j+1] > dp[rem.i-1][rem.j+1]){
                    que.add(new Pair(rem.psf+"d2 " , rem.i , rem.j + 1));
                }
                else{
                    que.add(new Pair(rem.psf+"d1 " , rem.i - 1 , rem.j + 1));
                }
                
                
            }
            else{
                
                if(dp[rem.i-1][rem.j+1] >= dp[rem.i][rem.j+1] && dp[rem.i-1][rem.j+1] >= dp[rem.i+1][rem.j+1] ){
                     que.add(new Pair(rem.psf+"d1 " , rem.i - 1 , rem.j + 1));
                }
                 if(dp[rem.i][rem.j+1] >= dp[rem.i-1][rem.j+1] && dp[rem.i][rem.j+1] >= dp[rem.i+1][rem.j+1] ){
                     que.add(new Pair(rem.psf+"d2 " , rem.i  , rem.j + 1));
                }
                 if(dp[rem.i+1][rem.j+1] >= dp[rem.i][rem.j+1] && dp[rem.i+1][rem.j+1] >= dp[rem.i-1][rem.j+1] ){
                     que.add(new Pair(rem.psf+"d3 " , rem.i + 1 , rem.j + 1));
                }
            }
            
        }
        
        
    }

}
