  public static class pair{
        TreeNode node;
        int hl;
        
        pair(TreeNode node , int hl){
            this.node = node;
            this.hl = hl;
        }
        
    }
    
    static int[] minmax = new int[2]; 
    
    public static void width(TreeNode root,int hl){
        if(root == null) return;
        minmax[0] = Math.min(minmax[0],hl);
        minmax[1] = Math.max(minmax[1],hl);

        width(root.left,hl-1);
        width(root.right,hl+1);
    }

    public static ArrayList<Integer> verticalOrderSum(TreeNode root) {
        
        width(root,0);
        int len = minmax[1] - minmax[0] + 1;
        ArrayList<Integer> ans = new ArrayList<>();
        
        for(int i = 0 ; i < len ; i++){
            ans.add(0);
        }
        
        Queue<pair> que = new ArrayDeque<>();
        que.add(new pair(root,0));
        
        while(que.size() > 0){
            int childs = que.size();
            
            while(childs-->0){
                pair p = que.remove();
                int idx = p.hl+Math.abs(minmax[0]);
                int nsum = ans.get(idx) + p.node.val;
                ans.set(idx,nsum);
                
                TreeNode par = p.node;
                
                if(par.left != null) que.add(new pair(par.left,p.hl-1));
                if(par.right != null) que.add(new pair(par.right,p.hl+1));
                
            }
            
        }
        
        return ans;
    }
