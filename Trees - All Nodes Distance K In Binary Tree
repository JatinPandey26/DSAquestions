 
  public static ArrayList<TreeNode> nodeToRootPath(TreeNode node, int data) {

    if (node == null) return null;

    if (node.data == data) {
      ArrayList<TreeNode> blist = new ArrayList<>();
      blist.add(node);
      return blist;
    }

    ArrayList<TreeNode> left = nodeToRootPath(node.left, data);

    if (left != null ) {
      left.add(node);
      return left;
    }

    ArrayList<TreeNode> right = nodeToRootPath(node.right, data);

    if (right != null) {
      right.add(node);
      return right;
    }

    return null;

  }

  public static void distanceK(TreeNode node, int target, int k) {
    ArrayList<TreeNode> path =  nodeToRootPath(node, target);
      

    if(path == null) return;

    for (int i = 0 ; i < path.size() && i <= k ; i++ ) {
      printKLevelsDown(path.get(i), k - i, i == 0 ? null : path.get(i - 1));
    }
  }

  public static void printKLevelsDown(TreeNode node, int k, TreeNode blocker) {
    //   RECURSIVE APPROACH
    if (k < 0 || node == null || node == blocker) {
      return ;
    }

    if (k == 0) {
      System.out.println(node.data);
    }
    printKLevelsDown(node.left, k - 1, blocker);
    printKLevelsDown(node.right, k - 1, blocker);
  }
