import java.util.*;

class Main {
    public static class ListNode {
        int val = 0;
        ListNode next = null;

        ListNode(int val) {
            this.val = val;
        }
    }
    
     public static ListNode midNode(ListNode head) {
    ListNode fast = head;
    ListNode slow = head;

    while (fast.next != null && fast.next.next != null) {
      fast = fast.next.next;
      slow = slow.next;
    }
    return slow;
  }
  
  public static ListNode reverse(ListNode head) {
   if(head == null || head.next == null ){
       return head;
   }
    ListNode pre = head;
    ListNode curr = head.next;
    ListNode temp = null;

    while (curr != null) {
        temp = curr.next;https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/linked-list/fold-of-linkedlist/ojquestion#
      curr.next = pre;
      pre = curr;
      curr = temp;
      
    }
    
    head.next = null;
    
    return pre;

  }

    public static void fold(ListNode head) {
     ListNode mid = midNode(head);
     ListNode nhead = reverse(mid.next);
     mid.next = null;
     
     ListNode left = head;
     ListNode right = nhead;
     
     while(left != null && right != null){
         ListNode ltemp = left.next;
         ListNode rtemp = right.next;
         left.next = right;
         right.next = ltemp;
         
         left = ltemp;
         right = rtemp;
         
     }
     
    }

    static void printList(ListNode node) {
        while (node != null) {
            System.out.print(node.val + " ");
            node = node.next;
        }
    }

    public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        ListNode dummy = new ListNode(-1);
        ListNode prev = dummy;
        while (n-- > 0) {
            prev.next = new ListNode(scn.nextInt());
            prev = prev.next;
        }

        ListNode head = dummy.next;
        fold(head);
        printList(head);
    }
}
