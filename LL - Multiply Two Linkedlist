public static ListNode reverse(ListNode node){
        ListNode prev = null;
        ListNode curr = node;
        
        
        while(curr != null){
            ListNode forw = curr.next;
            curr.next = prev;
            prev = curr;
            curr = forw;
            
        }
        
        return prev; 
        
    }
    
    public static void addTwoLL(ListNode head , ListNode ans_itr){
        ListNode c1 = head;
        ListNode c2 = ans_itr;
        int carry = 0;
        
        while(c1 != null || carry != 0){
            int sum = carry + (c1 != null ? c1.val : 0) + (c2.next != null ? c2.next.val : 0) ;
            
            int digit = sum % 10;
            carry = sum / 10;
            
            if(c2.next != null){
                c2.next.val = digit;
            }
            else{
                c2.next = new ListNode(digit);
            }
            
            if(c1 != null){
                c1 = c1.next;
            }
            c2 = c2.next;
            
        }
    }
    
    public static ListNode multiplyWithDigit(ListNode head , int digit){
        
        ListNode ans = new ListNode(-1);
        ListNode ac = ans;
        ListNode curr = head;
        
        int carry = 0;
        while(carry != 0 || curr != null){
            int mul = carry + (curr != null? curr.val : 0) * digit;
            carry = mul / 10;
            mul %= 10;
            
            ListNode nNode = new ListNode(mul);
            ac.next = nNode;
            ac = ac.next;
            
            if(curr != null){
                curr = curr.next;
            }
            
        }
        return ans.next;
    } 
    
    public static ListNode multiplyTwoLL(ListNode l1, ListNode l2) {
        l1 = reverse(l1);
        l2 = reverse(l2);
        ListNode dummy = new ListNode(-1);
        ListNode ans_itr = dummy;
        ListNode l2_itr = l2;
        while(l2_itr != null){
            ListNode prod = multiplyWithDigit(l1,l2_itr.val);
            l2_itr = l2_itr.next;
            
            addTwoLL(prod,ans_itr);
            ans_itr = ans_itr.next;
        }
        
        return reverse(dummy.next);
    }
