 public static ListNode midNode(ListNode head) {
    ListNode fast = head;
    ListNode slow = head;

    while (fast.next != null && fast.next.next != null) {
      fast = fast.next.next;
      slow = slow.next;
    }
    return slow;
  }
  
  public static ListNode reverse(ListNode head) {
   if(head == null || head.next == null ){
       return head;
   }
    ListNode pre = head;
    ListNode curr = head.next;
    ListNode temp = null;

    while (curr != null) {
        temp = curr.next;
      curr.next = pre;
      pre = curr;
      curr = temp;
      
    }
    
    head.next = null;
    
    return pre;

  }

    public static boolean isPalindrome(ListNode head) {
        if(head == null || head.next == null){
            return true;
        }
        ListNode mid = midNode(head);
        ListNode nhead  = mid.next;
        mid.next = null;
        
        nhead = reverse(nhead);
        
        ListNode left = head;
        ListNode right = nhead;
        
        while(left != null && right != null){
            if(left.val != right.val){
                return false;
            }
            left = left.next;
            right = right.next;
        }
        
        return true;
    }
