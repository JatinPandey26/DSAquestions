import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   
   public static boolean isCycle( ArrayList<Edge>[] graph , int src , boolean[] visited , int osrc){
        
        visited[src] = true;
        for(Edge edge : graph[src]){
            if(visited[edge.nbr] == false ){
                boolean check =  isCycle(graph,edge.nbr,visited , src) ;
                if(check){
                    return true;
                }
            }
            
           else if( edge.nbr != osrc ){
                return true;
            }
          
        }
        return false;
        
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

   
      // BFS
    //   boolean[] visited = new boolean[vtces];
    // for(int src = 0 ; src < vtces ;src++ )
    // {  if(visited[src] == true){
    //     continue;
    // }
    //   Queue<Integer> que = new ArrayDeque<>();
    //   que.add(src );
     
    //   while(que.size() > 0){
    //       int  top = que.remove();
    //       if(visited[top] == true){
    //           System.out.println(true);
    //           return;
              
    //       }
    //       visited[top] = true;
         
          
    //       for(Edge edge : graph[top]){
    //           if(visited[edge.nbr] == false){
    //               que.add(edge.nbr );
    //           }
    //       }
    //   }}
      
      
    //   System.out.println(false);
    
    
    
    
    
    // DFS
    
    boolean[] visited = new boolean[vtces];

    for(int src = 0 ; src < vtces ; src++ ){
        if(visited[src] == false ){
          boolean check = isCycle(graph,src,visited, src);
          if(check){
              
              System.out.println(true);
              return;
          }
        }
    
    }
  System.out.println(false);
   }
}
