  public static class MedianPriorityQueue {
    PriorityQueue<Integer> left;
    PriorityQueue<Integer> right;

    public MedianPriorityQueue() {
      left = new PriorityQueue<>(Collections.reverseOrder());
      right = new PriorityQueue<>();
    }

    public void add(int val) {
      // write your code here
      if(right.size() > 0 && right.peek() < val){
          right.add(val);
      }
      else{
          left.add(val);
      }
      
      if(left.size() - right.size() == 2 ){
          int v = left.remove();
          right.add(v);
      }else if(right.size() - left.size() == 2){
          int v = right.remove();
          left.add(v);
      }
      
    }

    public int remove() {
      // write your code here
         if(left.size() + right.size() == 0){
          System.out.println("Underflow");
          return -1; 
      }
      
      if(left.size() == right.size()){
          return left.remove();
      }
      else{
          if(left.size() > right.size()){
              return left.remove();
          }
          else{
              return right.remove();
          }
      }
    }

    public int peek() {
      // write your code here
      if(left.size() + right.size() == 0){
          System.out.println("Underflow");
          return -1; 
      }
      
      if(left.size() == right.size()){
          return left.peek();
      }
      else{
          if(left.size() > right.size()){
              return left.peek();
          }
          else{
              return right.peek();
          }
      }
      
      
    }

    public int size() {
      // write your code here
      return left.size() + right.size();
    }
  }
