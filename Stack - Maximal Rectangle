 public static int maximalRectangle(int[][] arr) {

    int[] height = new int[arr[0].length];
    int maxArea = 0;
    for (int i = 0 ; i < height.length ; i++ ) {
      height[i] = arr[0][i];

    }
    maxArea = Math.max(maxArea, largestRectangleArea(height));

    for (int i = 1 ; i < arr.length ; i++ ) {
      for (int j = 0 ; j < arr[0].length ; j++) {
        if (arr[i][j] == 1) {
          height[j] += 1;
        }
        else {
          height[j] = 0;
        }
      }
      maxArea = Math.max(maxArea, largestRectangleArea(height));

    }

    return maxArea;
  }

  public static int largestRectangleArea(int[] heights) {

    Stack<Integer> st = new Stack<>();
    st.push(-1);
    int maxArea = 0;
    for (int i = 0 ; i <= heights.length ; i++) {
      int val = i == heights.length ? 0 : heights[i] ;

      while (st.size() > 0 && st.peek() != -1 && heights[st.peek()] >= val ) {
        int ri = i;
        int h = heights[st.pop()];
        int li = st.peek();
        maxArea = Math.max(maxArea, h * (ri - li - 1));

      }
      st.push(i);
    }

    return maxArea;
  }
