

  public static int meetingRooms(int intervals[][]) {
    if (intervals.length == 0) return 0;
    PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
    Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
    int[] fm = new int[2];
    fm[0] = intervals[0][0];
    fm[1] = intervals[0][1];
    pq.add(fm);
    int ans = 0;
    for (int i = 1; i < intervals.length ; i++) {
      while (pq.size() > 0 && pq.peek()[1] <= intervals[i][0]) pq.poll();

      int[] meet = new int[2];
      meet[0] = intervals[i][0];
      meet[1] = intervals[i][1];
      pq.add(meet);

      ans = Math.max(ans, pq.size());

    }
    ans = Math.max(ans, pq.size());
    return ans;
  }
  
  
 
