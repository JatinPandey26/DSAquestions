/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root == null) return "null";
        
        String left = serialize(root.left);
        
        String right = serialize(root.right);
        
        // System.out.println(root.val + "," + left + "," + right);
        
        return root.val + "," + left + "," + right;
    }

    // Decodes your encoded data to tree.
    class Pair{
        TreeNode node;
        int childCount;
        Pair(TreeNode node , int childCount){
            this.node = node;
            this.childCount = childCount;
        }
    }
    public TreeNode deserialize(String data) {
        Stack<Pair> st = new Stack<>();
        String[] arr = data.split(",");
        TreeNode root = null;
        for(int i = 0 ; i < arr.length ; i++){
            
             if(arr[i].equals("null")){
              if(st.size()>0) {
                  st.peek().childCount++;
                 if(st.peek().childCount == 2){
                   st.pop();
                }
              } 
            }
            else{
                TreeNode node = new TreeNode(Integer.valueOf(arr[i]));
               if(st.size() == 0){
                root = node;
                st.push(new Pair(node,0));
                }
                else{
                
               
                
                
                if(st.peek().childCount == 0){
                   st.peek().node.left = node; 
                    st.peek().childCount+=1;
                }
                else if(st.peek().childCount == 1){
                   st.peek().node.right = node;   
                   st.peek().childCount+=1;
                    
                }
                 
                    if(st.peek().childCount == 2){
                   st.pop();
                }
                st.push(new Pair(node,0));
                    
                 }
                }  
             }
            
          
        
        return root;
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
